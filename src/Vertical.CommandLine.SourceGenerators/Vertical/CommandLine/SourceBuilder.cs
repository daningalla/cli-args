using System.Text;

namespace Vertical.CommandLine;

internal static partial class SourceBuilder
{
    public static string Build(HandlerMetadata[] handlers, bool hasDiagnostics)
    {
        var builder = new StringBuilder(25000);
        var cs = new CSharpFormatter(builder);

        if (handlers.Length > 0 && !hasDiagnostics)
            BuildSource(handlers, cs);
        
        return builder.ToString();
    }

    private static void BuildSource(HandlerMetadata[] handlers, CSharpFormatter cs)
    {
        WriteHeader(cs);
        WriteUsings(cs);
        WriteExtensions(handlers, cs);
    }

    private static void WriteExtensions(HandlerMetadata[] handlers, CSharpFormatter cs)
    {
        cs.AppendLine($"namespace {Constants.BaseNamespace}");
        cs.AppendBlock(inner => WriteExtensionClass(handlers, inner));
    }

    private static void WriteHeader(CSharpFormatter cs)
    {
        cs.AppendLine("// -----------------------------------------------------");
        cs.AppendLine("// Copyright (C) 2023 Vertical Software");
        cs.AppendLine("// Use of this source code is governed by an MIT-style");
        cs.AppendLine("// license that can be found in the LICENSE file or at");
        cs.AppendLine("// https://opensource.org/licenses/MIT.");
        cs.AppendLine("// <auto-generated/>");
        cs.AppendLine("// -----------------------------------------------------");
    }

    private static void WriteUsings(CSharpFormatter cs)
    {
        cs.AppendLine("using System;");
        cs.AppendLine("using System.Collections.Generic;");
        cs.AppendLine("using System.Threading.Tasks;");
        cs.AppendLine("using Vertical.CommandLine;");
        cs.AppendLine("using Vertical.CommandLine.Binding;");
        cs.AppendLine("using Vertical.CommandLine.Invocation;");
        cs.AppendLine();
        cs.AppendLine("#nullable enable");
        cs.AppendLine();
    }
}